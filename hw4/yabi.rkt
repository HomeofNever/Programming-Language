(define (isId? expr)
  (cond
    ((equal? expr 'a) #t)
    ((equal? expr 'b) #t)
    ((equal? expr 'c) #t)
    ((equal? expr 'd) #t)
    ((equal? expr 'e) #t)
    ((equal? expr 'f) #t)
    ((equal? expr 'g) #t)
    ((equal? expr 'h) #t)
    ((equal? expr 'i) #t)
    ((equal? expr 'j) #t)
    ((equal? expr 'k) #t)
    ((equal? expr 'l) #t)
    ((equal? expr 'm) #t)
    ((equal? expr 'n) #t)
    ((equal? expr 'o) #t)
    ((equal? expr 'p) #t)
    ((equal? expr 'q) #t)
    ((equal? expr 'r) #t)
    ((equal? expr 's) #t)
    ((equal? expr 't) #t)
    ((equal? expr 'u) #t)
    ((equal? expr 'v) #t)
    ((equal? expr 'w) #t)
    ((equal? expr 'x) #t)
    ((equal? expr 'y) #t)
    ((equal? expr 'z) #t)
    (else #f)
    )
  )
    

(define (mystart myvars expr)
  ( cond
     ((equal? expr 'true) #t)
     ((equal? expr 'false) #f)
     ((isId? expr) (car myvars))
     ((equal? (car expr) 'prog) (mystart myvars (cadr expr)))
     ((equal? (car expr) 'myignore) #f)
     ((equal? (car expr) 'myand) (and
                                  (mystart myvars (cadr expr))
                                  (mystart myvars (caddr expr))
                                 ))
     ((equal? (car expr) 'myor) (or
                                  (mystart myvars (cadr expr))
                                  (mystart myvars (caddr expr))
                                 ))
     ((equal? (car expr) 'mynot) (not (mystart myvars (cadr expr))))
     ((equal? (car expr) 'mylet) (mystart
                                   (cons (mystart myvars (caddr expr)) myvars)
                                   (cadddr expr)
                                 ))
     (else #f)
  )
)


;; Test Drive

(define (myinterpreter x)
  (if (null? x)
      '()
       (cons (mystart '() (car x)) (myinterpreter (cdr x)))
  )
)